/**
* Rebecca Sanders
* rsan397
* Comp Sci 230: Assignment 2
*/

import java.util.Set;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.net.InetAddress;
import java.util.Collections;
import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;
import java.io.File;
import java.util.Scanner;
import java.io.IOException;
import java.nio.file.Paths; // new
import java.io.BufferedReader;
import java.io.FileReader;
import java.lang.Exception;
import java.net.UnknownHostException;


class ProcessFile {
private Set<String> sourceIp;
private Set<String> destinationIp;
public ArrayList<ArrayList<String>> sourceGraphValues;
public ArrayList<ArrayList<String>> destinationGraphValues;
public int sourceCount;
public int destCount;
private File fileName;
	
	public ProcessFile(File fileName){
		//String file = "traceSmall.txt";
		this.fileName = fileName;
		sourceIp = new HashSet<String>();
		destinationIp = new HashSet<String>();
		sourceGraphValues = new ArrayList<ArrayList<String>>();
		destinationGraphValues = new ArrayList<ArrayList<String>>();
		sourceCount = 0;
		destCount = 0;
		getThroughFile();
	}

	/**
    * opens the selected file - called on from the action listener event associated with the JMenuItem
    * extracts all source and desitination ip addresses and puts them in arrays
    * extracts associated time stamps and packet sizes for each ip address and stores in an array
    */
	private void getThroughFile(){
		String sourceNumber = "192\\.168\\.0\\.(([0-9])|([1-9][0-9])|(1\\d{2})|(2[0-4]\\d)|(25[0-5]))";
		String destinationNumber = "10\\.0\\.((([0-9])|([1-9][0-9])|(1\\d{2})|(2[0-4]\\d)|(25[0-5]))\\.(([0-9])|([1-9][0-9])|(1\\d{2})|(2[0-4]\\d)|(25[0-5])))";
		try {
    		BufferedReader reader = new BufferedReader(new FileReader(fileName));
    		String line;
    		while ((line = reader.readLine()) != null){
            	String [] currentLine = line.split("\\t");
                //for (String word : currentLine){
                    if (currentLine[2].matches(sourceNumber)){
                        sourceIp.add(currentLine[2]);
                        sourceCount=sourceCount + 1;
                        ArrayList<String> holding = new ArrayList<String>();
                        holding.add(currentLine[2]);
                        holding.add(currentLine[1]);
                        holding.add(currentLine[7]);
                        sourceGraphValues.add(holding);     
                    }
                    if (currentLine[4].matches(destinationNumber)){
                    	destinationIp.add(currentLine[4]);
                    	destCount = destCount +1;
                    	ArrayList<String> temp = new ArrayList<String>();
                        temp.add(currentLine[4]);
                        temp.add(currentLine[1]);
                        temp.add(currentLine[7]);
                        destinationGraphValues.add(temp);  
                    }
                }                      
          	
            reader.close();
    	}	
    
  		catch (Exception e){
			return;
  		}

	}

	/**
    * get method for list of source ip addresses to be used in JComboBox
    * @return ArrayList<String> of sorted ip addresses
    */
	public ArrayList<String> getSource(){
		ArrayList<String> sourceResult = sortIp(sourceIp);
		return sourceResult;

	}

	/**
    * get method for list of destination ip addresses to be used in JComboBox
    * @return ArrayList<String> of sorted ip addresses
    */
	public ArrayList<String> getDestination(){
		ArrayList<String> destResult = sortIp(destinationIp);
		return destResult;
	}

	/**
    * get method for list of source ip addresses and time stamps and packet size
    * called from the action event which is triggered by selected a JComboBox item
    * @return ArrayList<ArrayList<String>> of sorted ip addresses and associated time and packet values
    */
	public ArrayList<ArrayList<String>> getSourceValues(){
		return sourceGraphValues;
	}

	/**
    * get method for list of destination ip addresses and time stamps and packet size
    * called from the action event which is triggered by selected a JComboBox item
    * @return ArrayList<ArrayList<String>> of sorted ip addresses and associated time and packet values
    */
	public ArrayList<ArrayList<String>> getDestinationValues(){
		return destinationGraphValues;
	}

	/**
    * sorts the ip addresses
    * @param takes the Set<String> file generated by getThroughFile() method
    * @return ArrayList<String> of sorted ip addresses
    */
	private ArrayList<String> sortIp(Set<String> file){
		ArrayList<InetAddress> tempFile = new ArrayList<InetAddress>();
		ArrayList<String> tempString = new ArrayList<String>();
		InetAddress address = null;
		try { 
			for(String ip : file){
			address = InetAddress.getByName(ip);
			tempFile.add(address);
			}
		}
		catch (UnknownHostException e){
			return null;
		}

		Collections.sort(tempFile, new Comparator<InetAddress>(){
			@Override
			public int compare(InetAddress adr1, InetAddress adr2){
				byte[] ba1 = adr1.getAddress();
        		byte[] ba2 = adr2.getAddress();
        		for(int i = 0; i < ba1.length; i++) {
            		int b1 = unsignedByteToInt(ba1[i]);
            		int b2 = unsignedByteToInt(ba2[i]);
            		if(b1 == b2)
                		continue;
            		if(b1 < b2)
                		return -1;
            		else
                		return 1;
        		}
        		return 0;
    		}
    		private int unsignedByteToInt(byte b) {
        		return (int) b & 0xFF;
    		}
		});

		for(InetAddress nums : tempFile){
			String item = nums.getHostAddress();
			tempString.add(item);
		}
		return tempString;
	}


}
