/**
* Rebecca Sanders
* rsan397
* Comp Sci 230: Assignment 2
*/

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import javax.swing.SwingUtilities;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.BorderFactory;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;
import java.lang.Math;

class ProcessGraph {
	private ArrayList<Double> time;
	private ArrayList<Double> packets;
	protected ArrayList<ArrayList<String>> values;
	protected String ipAddress;
	private ArrayList<ArrayList<Double>> totalIncrements;
	private ArrayList<Double> byteIncrements;
	private ArrayList<Double> timeIncrements;
	private int xMax;
	private int yMax;

	public ProcessGraph (ArrayList<ArrayList<String>> values, String ipAddress){
		this.values = values;
		this.ipAddress = ipAddress;
		time = new ArrayList<Double>();
		packets = new ArrayList<Double>();
		timeIncrements = new ArrayList<Double>();
		byteIncrements = new ArrayList<Double>();
		totalIncrements = new ArrayList<ArrayList<Double>>();
		xMax = 0;
		yMax = 0;
		getValues();
		sumValues();
	}

	/**
    * takes ArrayList<ArrayList<String>> generated by ProcessFile class and uses it to extract time
    * and packet values - method is triggered when JComboBox item is selected and it chooses the
    * correct ip address and associated values so the proper graph can be displayed
    */
	public void getValues(){
		for (ArrayList<String> arrayNums : values){
			String tempAddress = arrayNums.get(0);
			if (ipAddress.toString().equals(tempAddress.toString())){
				String numTime = arrayNums.get(1);
				Double doubleTime = Double.parseDouble(numTime);
				time.add(doubleTime);
				String numBytes = arrayNums.get(2);
				Double doubleBytes = Double.parseDouble(numBytes);
				packets.add(doubleBytes);
			}
		}
		return;

			
	}

	/**
    * takes the ArrayList generated by getValues() and creates ArrayList of time and packet values
    * stores number of packets associated with each 2 second time interval
    */
	public void sumValues(){
		int index = 0;
		Double timeIncrement = 2.0;
		Double timeValue = time.get(index);
		Double packetValue;
		while (index < time.size()){
			Double packetTotal = 0.0;
			while (timeValue < timeIncrement && index < packets.size()){
				timeValue = time.get(index);
				packetValue = packets.get(index);
				packetTotal= packetTotal + packetValue;
				index = index + 1;
			}
			ArrayList<Double> xy = new ArrayList<Double>();
			xy.add(timeIncrement);
			xy.add(packetTotal);
			totalIncrements.add(xy);
			// to get max and min need separate arrays
			timeIncrements.add(timeIncrement);
			byteIncrements.add(packetTotal);
			timeIncrement = timeIncrement + 2.0;	
		}
		return;

	}

	/**
    * get method for totalIncrements array which includes number of packets per 2 sec time interval
    * for the selected ip address
    * @return ArrayList<ArrayList<Double>> of time and packet values
    */
	public ArrayList<ArrayList<Double>> getXValues(){
		return totalIncrements;
	}

	/**
    * get method for the maximum packet size found in the array
    * used to create graph scale in DrawGraph class
    * @return int yMax value
    */
	public int getYMax(){
		Double max = Collections.max(byteIncrements);
		yMax = max.intValue();
		return yMax;
	}

	/**
    * get method for the maximum time value found in the array
    * used to create graph scale in DrawGraph class
    * @return int xMax value
    */
	public int getXMax(){
		Double max = timeIncrements.get(timeIncrements.size()-1);
		xMax = max.intValue();
		return xMax;
	}

	/**
    * get method for byte increments array which has number of packets per 2 sec interval
    * (without inclusive time value)
    * @return ArrayList<Double> of packet values
    */
	public ArrayList<Double> getYValues(){
		return byteIncrements;
	}

	/**
    * list of all time values associated with a certain ip address
    * values are added to this array in the getValues() method
    * @return ArrayList<Double> of time values
    */
	public ArrayList<Double> getTime(){
		return time;
	}

	/**
    * list of all packet values associated with a certain ip address
    * values are added to this array in the getValues() method
    * @return ArrayList<Double> of packet values
    */
	public ArrayList<Double> getPackets(){
		return packets;
	}
	
}